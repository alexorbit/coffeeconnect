#!/usr/bin/env sh

# Make sure we have a network connection
if ! curl -s -o /dev/null http://www.duckduckgo.com
then
   echo "Can't resolve host. (Are you connected to the access point?)"
   exit 1
fi


# Already authenticated?
#
# If redirected to https://duckduckgo.com from
# http://www.duckduckgo.com we have already been authenticated.
BEGIN_URL=$(curl -s -o /dev/null -w "%{redirect_url}" http://www.duckduckgo.com)
if [ "$BEGIN_URL" = "https://duckduckgo.com/" ]
then
    exit 0
fi


# Start authentication redirect rodeo
CHECK_URL=$(echo "$BEGIN_URL" | sed -E "s/\\?cmd=login/check\\?cmd=login/g")
SIGNUP_URL=$(curl -s -w "%{redirect_url}" "$CHECK_URL")


# Have we submitted login data before?
#
# If not, we will be redirected to the "/signup?data=" page that
# contains the Sign Up form.
#
# Use random personal data generated with
# https://www.fakenamegenerator.com
if echo "$SIGNUP_URL" | grep -q -o "/signup?data="
then
    LOGIN_PAGE=$(curl -s -d fname="Mary" \
    		      -d lname="Brown" \
		      -d email="marywbrown@teleworm.us" \
		      -d postcode="12401" "$SIGNUP_URL")
# If so, we are already redirected to the login page.
else
    LOGIN_PAGE="$SIGNUP_URL"
fi


# Continue with initial or repeat login process by scraping the
# device-specific generated user name and password values from the
# hidden login form.
LOGIN_USER=$(echo "$LOGIN_PAGE" | grep "user" | cut -d\" -f6)
LOGIN_PASSWORD=$(echo "$LOGIN_PAGE" | grep "password" | cut -d\" -f6)
LOGIN_URL="https://aruba.odyssys.net/cgi-bin/login"


# Submit device-specific generated credentials and check if we
# authenticated properly.
AUTHENTICATED=$(curl -s -d cmd=authenticate \
		       -d user="$LOGIN_USER" \
		       -d password="$LOGIN_PASSWORD" \
		       -d url="https://wifi.starbucks.com/" \
		       $LOGIN_URL | grep -o "url=https://wifi.starbucks.com/")
if [ -n "$AUTHENTICATED" ]
then
    exit 0
else
    echo "Connection failed."
    exit 1
fi
